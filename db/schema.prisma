// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Use this block with "blitz prisma migrate dev" or "blitz prisma db push" (DESTRUCTIVE)
// generator client {
//   provider = "prisma-client-js"
// }

// Use this block with "prisma generate"
generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  keepRelationScalarFields = "true"
  includeRequiredFields    = "true"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Activity {
  id                      String      @id @default(uuid()) @db.Uuid
  name                    String      @db.VarChar(255)
  description             String?     @db.VarChar
  characterLevelMin       Int
  characterLevelMax       Int
  skillId                 String?     @db.Uuid
  skillIdRequiredValue    Int?
  pvpChance               Int
  raceRestrictionType     Int
  raceId                  String?     @db.Uuid
  careerRestrictionType   Int
  careerId                String?     @db.Uuid
  imageId                 String?     @db.Uuid
  imageBackgroundColor    String?     @db.VarChar(10)
  isDeleted               Boolean
  notes                   String?     @db.VarChar(3000)
  gender                  Int?
  singleBattleIntroScript String?     @db.VarChar
  groupBattleIntroScript  String?     @db.VarChar
  career                  Career?     @relation(fields: [careerId], references: [id])
  image                   Image?      @relation(fields: [imageId], references: [id])
  race                    Race?       @relation(fields: [raceId], references: [id])
  skill                   Skill?      @relation(fields: [skillId], references: [id])
  characters              Character[]
}

model ActivityResult {
  id                    String      @id @default(uuid()) @db.Uuid
  result                String?     @db.VarChar
  battleTurns           String?     @db.VarChar
  cash                  Int
  experience            Int
  health                Int?
  pvpWins               Int?
  pvpLosses             Int?
  customItemId1         String?     @db.Uuid
  customItemId2         String?     @db.Uuid
  activityId            String      @db.Uuid
  featId                String?     @db.Uuid
  skillId               String?     @db.Uuid
  isNewSkill            Boolean?
  resultsCalculatedDate DateTime?   @db.Timestamp(6)
  resultsAllocatedDate  DateTime?   @db.Timestamp(6)
  characterId           String?     @db.Uuid
  isSuccess             Boolean?
  battleEvents          String?     @db.VarChar
  character             Character?  @relation(fields: [characterId], references: [id])
  customItem1           CustomItem? @relation("activityresult_customitemid1Tocustomitem", fields: [customItemId1], references: [id])
  customItem2           CustomItem? @relation("activityresult_customitemid2Tocustomitem", fields: [customItemId2], references: [id])
  feat                  Feat?       @relation(fields: [featId], references: [id])
  skill                 Skill?      @relation(fields: [skillId], references: [id])
}

model Adventure {
  id                          String             @id @default(uuid()) @db.Uuid
  name                        String?            @db.VarChar(50)
  activityId                  String             @db.Uuid
  itemIdRequired              String?            @db.Uuid
  itemConsumedOnSuccess       Boolean
  gender                      Int?
  introductionScript          String?            @db.VarChar(5000)
  adventureCheckTypeId        String             @db.Uuid
  fightTargetTypeIdCheck      String?            @db.Uuid
  raceIdFightCheck            String?            @db.Uuid
  careerIdFightCheck          String?            @db.Uuid
  maskNameFightCheck          String?            @db.VarChar(100)
  levelFightCheck             Int?
  useCharacterImageFightCheck Boolean?
  maskImageBgColorFightCheck  String?            @db.VarChar(10)
  imageIdMaskFightCheck       String?            @db.Uuid
  skillIdCheck                String?            @db.Uuid
  skillValueCheck             Int?
  failureScript               String?            @db.VarChar(5000)
  successScript               String?            @db.VarChar(5000)
  itemIdReward                String?            @db.Uuid
  cashReward                  Int
  itemTypeIdDrop              String?            @db.Uuid
  itemDropAny                 Boolean
  itemDropRelated             Boolean
  itemDropKeywords            String?            @db.VarChar(100)
  isDeleted                   Boolean
  featIdReward                String?            @db.Uuid
  adventureCheckType          AdventureCheckType @relation(fields: [adventureCheckTypeId], references: [id])
  career                      Career?            @relation(fields: [careerIdFightCheck], references: [id])
  feat                        Feat?              @relation(fields: [featIdReward], references: [id])
  fightTargetType             FightTargetType?   @relation(fields: [fightTargetTypeIdCheck], references: [id])
  image                       Image?             @relation(fields: [imageIdMaskFightCheck], references: [id])
  itemRequired                Item?              @relation("adventure_itemidrequiredToitem", fields: [itemIdRequired], references: [id])
  itemReward                  Item?              @relation("adventure_itemidrewardToitem", fields: [itemIdReward], references: [id])
  itemType                    ItemType?          @relation(fields: [itemTypeIdDrop], references: [id])
  race                        Race?              @relation(fields: [raceIdFightCheck], references: [id])
  skill                       Skill?             @relation(fields: [skillIdCheck], references: [id])
  careerAdventure             CareerAdventure[]
  raceAdventure               RaceAdventure[]
}

model BattlePool {
  id             String    @id @default(uuid()) @db.Uuid
  characterId    String    @db.Uuid
  groupId        String?   @db.Uuid
  characterLevel Int
  battleLevel    Decimal   @db.Decimal(18, 2)
  dateAdded      DateTime  @db.Timestamp(6)
  character      Character @relation(fields: [characterId], references: [id])
  group          Group?    @relation(fields: [groupId], references: [id])
}

model Career {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @db.VarChar(255)
  description     String?           @db.VarChar(1000)
  gender          Int?
  isDeleted       Boolean
  gameId          Int
  itemId1         String?           @db.Uuid
  itemId2         String?           @db.Uuid
  skillId1        String?           @db.Uuid
  skillId2        String?           @db.Uuid
  featId1         String?           @db.Uuid
  featId2         String?           @db.Uuid
  feat1           Feat?             @relation("career_featid1Tofeat", fields: [featId1], references: [id])
  feat2           Feat?             @relation("career_featid2Tofeat", fields: [featId2], references: [id])
  item1           Item?             @relation("career_itemid1Toitem", fields: [itemId1], references: [id])
  item2           Item?             @relation("career_itemid2Toitem", fields: [itemId2], references: [id])
  skill1          Skill?            @relation("career_skillid1Toskill", fields: [skillId1], references: [id])
  skill2          Skill?            @relation("career_skillid2Toskill", fields: [skillId2], references: [id])
  activities      Activity[]
  adventure       Adventure[]
  careerAdventure CareerAdventure[]
  careerRace      CareerRace[]
  characters      Character[]
  feat            Feat[]
  feats1          Feat[]            @relation("careerTofeat_careeridtarget1")
  feats2          Feat[]            @relation("careerTofeat_careeridtarget2")
  image           Image[]
  item            Item[]
  skill           Skill[]
}

model CareerRace {
  id               String             @id @default(uuid()) @db.Uuid
  careerId         String             @db.Uuid
  raceId           String             @db.Uuid
  maleWeight       Int
  femaleWeight     Int
  maleName         String             @db.VarChar(255)
  femaleName       String             @db.VarChar(255)
  bio              String             @db.VarChar(255)
  maleBio          String             @db.VarChar(255)
  femaleBio        String             @db.VarChar(50)
  flavorText       String             @db.VarChar(255)
  career           Career             @relation(fields: [careerId], references: [id])
  race             Race               @relation(fields: [raceId], references: [id])
  characterForHire CharacterForHire[]
}

model Character {
  id                       String           @id @default(uuid()) @db.Uuid
  userId                   String           @db.Uuid
  careerId                 String           @db.Uuid
  raceId                   String           @db.Uuid
  imageId                  String           @db.Uuid
  levelId                  String           @db.Uuid
  name                     String           @db.VarChar(255)
  experience               Int
  gender                   Int
  health                   Int
  maxHealth                Int
  biography                String           @db.VarChar
  activityResult           String?          @db.VarChar
  isDeleted                Boolean
  dateCreated              DateTime         @db.Timestamp(6)
  skillPoints              Int
  activityResultId         String?          @db.Uuid
  activityId               String?          @db.Uuid
  pvpWins                  Int
  pvpLosses                Int
  pvpRating                Float
  isNpc                    Boolean
  groupId                  String?          @db.Uuid
  dateLastActivitySelected DateTime         @db.Timestamp(6)
  isRetired                Boolean
  activity                 Activity?        @relation(fields: [activityId], references: [id])
  career                   Career           @relation(fields: [careerId], references: [id])
  image                    Image            @relation(fields: [imageId], references: [id])
  level                    CharacterLevel   @relation(fields: [levelId], references: [id])
  race                     Race             @relation(fields: [raceId], references: [id])
  activityResults          ActivityResult[]
  battlePool               BattlePool[]
  characterFeat            CharacterFeat[]
  characterGroup           CharacterGroup[]
  characterSkill           CharacterSkill[]
  userItem                 UserItem[]
}

model CharacterFeat {
  id          String    @id @default(uuid()) @db.Uuid
  characterId String    @db.Uuid
  featId      String    @db.Uuid
  rank        Int
  isEquipped  Boolean
  character   Character @relation(fields: [characterId], references: [id])
  feat        Feat      @relation(fields: [featId], references: [id])
}

model CharacterGroup {
  id          String    @id @default(uuid()) @db.Uuid
  characterId String    @db.Uuid
  groupId     String    @db.Uuid
  character   Character @relation(fields: [characterId], references: [id])
  group       Group     @relation(fields: [groupId], references: [id])
}

model CharacterSkill {
  id             String    @id @default(uuid()) @db.Uuid
  characterId    String    @db.Uuid
  skillId        String    @db.Uuid
  value          Int
  freePointValue Int
  character      Character @relation(fields: [characterId], references: [id])
  skill          Skill     @relation(fields: [skillId], references: [id])
}

model CustomItem {
  id               String           @id @default(uuid()) @db.Uuid
  itemid           String           @db.Uuid
  name             String?          @db.VarChar(255)
  description      String?          @db.VarChar(3000)
  flavorText       String?          @db.VarChar(3000)
  noTrade          Boolean
  item             Item             @relation(fields: [itemid], references: [id])
  activityResults1 ActivityResult[] @relation("activityresult_customitemid1Tocustomitem")
  activityResults2 ActivityResult[] @relation("activityresult_customitemid2Tocustomitem")
  userItem         UserItem[]
}

model Effect {
  id                         String                       @id @default(uuid()) @db.Uuid
  name                       String?                      @db.VarChar(50)
  effectDurationTypeId       String?                      @db.Uuid
  duration                   Int?
  attackModifier             Int
  attackKeyword              String?                      @db.VarChar(255)
  defenseModifier            Int
  defenseKeyword             String?                      @db.VarChar(255)
  damageHealing              Int
  armorModifier              Int
  weaponDamageModifier       Int
  isDeleted                  Boolean
  effectDurationType         EffectDurationType?          @relation(fields: [effectDurationTypeId], references: [id])
  effectSkillBonus           EffectSkillBonus[]
  effectSpecialMechanicCombo EffectSpecialMechanicCombo[]
  feats1                     Feat[]                       @relation("effectTofeat_effectidtarget1")
  feats2                     Feat[]                       @relation("effectTofeat_effectidtarget2")
}

model Feat {
  id                                                          String                      @id @default(uuid()) @db.Uuid
  name                                                        String?                     @db.VarChar(255)
  description                                                 String?                     @db.VarChar(255)
  featCastModeId                                              String?                     @db.Uuid
  reactiveEvent                                               String?                     @db.VarChar(255)
  featReactiveEventInitiatorId                                String?                     @db.Uuid
  cooldown                                                    Int
  skillId                                                     String?                     @db.Uuid
  skillRequiredValue                                          Int?
  featSpecialMechanicId                                       String?                     @db.Uuid
  cashPrize                                                   Int
  featTargetTypeIdTarget1                                     String?                     @db.Uuid
  genderTarget1                                               Int?
  damageHealingTarget1                                        Int
  raceRestrictionTypeTarget1                                  Int
  raceIdTarget1                                               String?                     @db.Uuid
  careerRestrictionTypeTarget1                                Int
  careerIdTarget1                                             String?                     @db.Uuid
  effectIdTarget1                                             String?                     @db.Uuid
  featTargetTypeIdTarget2                                     String?                     @db.Uuid
  genderTarget2                                               Int?
  damageHealingTarget2                                        Int
  raceRestrictionTypeTarget2                                  Int
  raceIdTarget2                                               String?                     @db.Uuid
  careerRestrictionTypeTarget2                                Int
  careerIdTarget2                                             String?                     @db.Uuid
  effectIdTarget2                                             String?                     @db.Uuid
  target1OnlyScript                                           String                      @db.VarChar
  target2OnlyScript                                           String                      @db.VarChar
  successScript                                               String                      @db.VarChar
  failureScript                                               String                      @db.VarChar
  isDeleted                                                   Boolean
  imageId                                                     String?                     @db.Uuid
  raceRestrictionType                                         Int?
  raceId                                                      String?                     @db.Uuid
  careerRestrictionType                                       Int?
  careerId                                                    String?                     @db.Uuid
  gender                                                      Int?
  level                                                       Int
  career                                                      Career?                     @relation(fields: [careerId], references: [id])
  career_careerToFeat_careerIdTarget1                         Career?                     @relation("careerTofeat_careeridtarget1", fields: [careerIdTarget1], references: [id])
  career_careerToFeat_careerIdTarget2                         Career?                     @relation("careerTofeat_careeridtarget2", fields: [careerIdTarget2], references: [id])
  effect_effectToFeat_effectIdTarget1                         Effect?                     @relation("effectTofeat_effectidtarget1", fields: [effectIdTarget1], references: [id])
  effect_effectToFeat_effectIdTarget2                         Effect?                     @relation("effectTofeat_effectidtarget2", fields: [effectIdTarget2], references: [id])
  featCastMode                                                FeatCastMode?               @relation(fields: [featCastModeId], references: [id])
  featReactiveEventInitiator                                  FeatReactiveEventInitiator? @relation(fields: [featReactiveEventInitiatorId], references: [id])
  featSpecialMechanic                                         FeatSpecialMechanic?        @relation(fields: [featSpecialMechanicId], references: [id])
  featTargetType_feat_featTargetTypeIdTarget1ToFeatTargetType FeatTargetType?             @relation("feat_feattargettypeidtarget1Tofeattargettype", fields: [featTargetTypeIdTarget1], references: [id])
  featTargetType_feat_featTargetTypeIdTarget2ToFeatTargetType FeatTargetType?             @relation("feat_feattargettypeidtarget2Tofeattargettype", fields: [featTargetTypeIdTarget2], references: [id])
  race_feat_raceIdTarget1ToRace                               Race?                       @relation("feat_raceidtarget1Torace", fields: [raceIdTarget1], references: [id])
  race_feat_raceIdTarget2ToRace                               Race?                       @relation("feat_raceidtarget2Torace", fields: [raceIdTarget2], references: [id])
  activityResults                                             ActivityResult[]
  adventure                                                   Adventure[]
  career_career_featId1ToFeat                                 Career[]                    @relation("career_featid1Tofeat")
  career_career_featId2ToFeat                                 Career[]                    @relation("career_featid2Tofeat")
  characterFeat                                               CharacterFeat[]
  item                                                        Item[]
  race_featToRace_featId1                                     Race[]                      @relation("featTorace_featid1")
  race_featToRace_featId2                                     Race[]                      @relation("featTorace_featid2")
}

model ForumCategory {
  id              String        @id @default(uuid()) @db.Uuid
  cssClass        String?       @db.VarChar(50)
  title           String?       @db.VarChar(200)
  creationDate    DateTime      @db.Timestamp(6)
  isDeleted       Boolean
  displayPriority Int?
  isLocked        Boolean
  forumThread     ForumThread[]
}

model ForumPost {
  id            String      @id @default(uuid()) @db.Uuid
  userId        String      @db.Uuid
  forumThreadId String      @db.Uuid
  content       String?     @db.VarChar(5000)
  creationDate  DateTime    @db.Timestamp(6)
  isDeleted     Boolean
  forumThread   ForumThread @relation(fields: [forumThreadId], references: [id])
}

model ForumThread {
  id              String        @id @default(uuid()) @db.Uuid
  userId          String        @db.Uuid
  forumCategoryId String        @db.Uuid
  content         String?       @db.VarChar(5000)
  isLocked        Boolean
  isSticky        Boolean
  creationDate    DateTime      @db.Timestamp(6)
  isDeleted       Boolean
  title           String?       @db.VarChar(200)
  forumCategory   ForumCategory @relation(fields: [forumCategoryId], references: [id])
  forumPost       ForumPost[]
}

model Gender {
  id    String  @id @default(uuid()) @db.Uuid
  name  String? @db.VarChar(50)
  image Image[]
}

model Group {
  id             String           @id @default(uuid()) @db.Uuid
  startDateTime  DateTime         @db.Timestamp(6)
  endDateTime    DateTime?        @db.Timestamp(6)
  duration       Decimal          @db.Decimal(18, 0)
  wins           Int
  losses         Int
  runTimes       Int
  battlePool     BattlePool[]
  characterGroup CharacterGroup[]
}

model Item {
  id                    String                 @id @default(uuid()) @db.Uuid
  name                  String?                @db.VarChar(255)
  itemTypeId            String                 @db.Uuid
  characterLevel        Int
  flavorText            String?                @db.VarChar(3000)
  description           String?
  healing               Int
  armor                 Int
  attack                Int
  attackKeyword         String?                @db.VarChar(25)
  damage                Int
  damageVariance        Float
  hitScript             String?                @db.VarChar(100)
  critScript            String?                @db.VarChar(100)
  missScript            String?                @db.VarChar(100)
  defense               Int
  defenseKeyword        String?                @db.VarChar(50)
  defendScript          String?                @db.VarChar(100)
  isDeleted             Boolean
  imageId               String?                @db.Uuid
  imageBackgroundColor  String?                @db.VarChar(10)
  notes                 String?                @db.VarChar(3000)
  raceRestrictionType   Int
  raceId                String?                @db.Uuid
  careerRestrictionType Int
  careerId              String?                @db.Uuid
  noTrade               Boolean
  featId                String?                @db.Uuid
  noTradeAfterEquip     Boolean
  isVisibleInInventory  Boolean
  career                Career?                @relation(fields: [careerId], references: [id])
  feat                  Feat?                  @relation(fields: [featId], references: [id])
  image                 Image?                 @relation(fields: [imageId], references: [id])
  itemType              ItemType               @relation(fields: [itemTypeId], references: [id])
  adventuresRequired    Adventure[]            @relation("adventure_itemidrequiredToitem")
  adventuresRewarded    Adventure[]            @relation("adventure_itemidrewardToitem")
  careers1              Career[]               @relation("career_itemid1Toitem")
  careers2              Career[]               @relation("career_itemid2Toitem")
  customItem            CustomItem[]
  itemEquippableInSlot  ItemEquippableInSlot[]
  itemSkillBonus        ItemSkillBonus[]
  races1                Race[]                 @relation("itemTorace_itemid1")
  races2                Race[]                 @relation("itemTorace_itemid2")
}

model ItemSlot {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String?                @db.VarChar(255)
  itemEquippableInSlot ItemEquippableInSlot[]
  userItem             UserItem[]
}

model ItemType {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @db.VarChar(50)
  isDeleted Boolean
  adventure Adventure[]
  item      Item[]
}

model Race {
  id            String          @id @default(uuid()) @db.Uuid
  name          String          @db.VarChar(255)
  isDeleted     Boolean
  itemId1       String?         @db.Uuid
  itemId2       String?         @db.Uuid
  skillId1      String?         @db.Uuid
  skillId2      String?         @db.Uuid
  featId1       String?         @db.Uuid
  featId2       String?         @db.Uuid
  feat1         Feat?           @relation("featTorace_featid1", fields: [featId1], references: [id])
  feat2         Feat?           @relation("featTorace_featid2", fields: [featId2], references: [id])
  item1         Item?           @relation("itemTorace_itemid1", fields: [itemId1], references: [id])
  item2         Item?           @relation("itemTorace_itemid2", fields: [itemId2], references: [id])
  skill1        Skill?          @relation("race_skillid1Toskill", fields: [skillId1], references: [id])
  skill2        Skill?          @relation("race_skillid2Toskill", fields: [skillId2], references: [id])
  activities    Activity[]
  adventure     Adventure[]
  careerRace    CareerRace[]
  characters    Character[]
  feats1        Feat[]          @relation("feat_raceidtarget1Torace")
  feats2        Feat[]          @relation("feat_raceidtarget2Torace")
  image         Image[]
  raceAdventure RaceAdventure[]
}

model Runtime {
  id   String   @id @default(uuid()) @db.Uuid
  time DateTime @db.Timestamp(6)
}

model Skill {
  id               String             @id @default(uuid()) @db.Uuid
  name             String             @db.VarChar(255)
  description      String?            @db.VarChar(255)
  learningScript   String             @db.VarChar
  careerId         String?            @db.Uuid
  isDeleted        Boolean
  gameId           Int
  career           Career?            @relation(fields: [careerId], references: [id])
  activities       Activity[]
  activityResults  ActivityResult[]
  adventure        Adventure[]
  careers1         Career[]           @relation("career_skillid1Toskill")
  careers2         Career[]           @relation("career_skillid2Toskill")
  characterSkill   CharacterSkill[]
  effectSkillBonus EffectSkillBonus[]
  itemSkillBonus   ItemSkillBonus[]
  races1           Race[]             @relation("race_skillid1Toskill")
  races2           Race[]             @relation("race_skillid2Toskill")
}

model UserItem {
  id                String     @id @default(uuid()) @db.Uuid
  userId            String     @db.Uuid
  customItemId      String     @db.Uuid
  characterId       String?    @db.Uuid
  itemSlotId        String?    @db.Uuid
  itemSlotVariation Int?
  character         Character? @relation(fields: [characterId], references: [id])
  customItem        CustomItem @relation(fields: [customItemId], references: [id])
  itemSlot          ItemSlot?  @relation(fields: [itemSlotId], references: [id])
}

model AdventureCheckType {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @db.VarChar(50)
  adventure Adventure[]
}

model CareerAdventure {
  id          String    @id @default(uuid()) @db.Uuid
  careerId    String    @db.Uuid
  adventureId String    @db.Uuid
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  career      Career    @relation(fields: [careerId], references: [id])
}

model CharacterForHire {
  id             String     @id @default(uuid()) @db.Uuid
  userId         String     @db.Uuid
  careerRaceId   String     @db.Uuid
  gender         Int
  expirationDate DateTime   @db.Timestamp(6)
  isHired        Boolean
  careerRace     CareerRace @relation(fields: [careerRaceId], references: [id])
}

model CharacterLevel {
  id            String      @id @default(uuid()) @db.Uuid
  level         Int
  maxExperience Int
  characters    Character[]
}

model EffectDurationType {
  id      String   @id @default(uuid()) @db.Uuid
  name    String?  @db.VarChar(255)
  effects Effect[]
}

model EffectSkillBonus {
  id       String @id @default(uuid()) @db.Uuid
  effectId String @db.Uuid
  skillId  String @db.Uuid
  bonus    Int
  effect   Effect @relation(fields: [effectId], references: [id])
  skill    Skill  @relation(fields: [skillId], references: [id])
}

model EffectSpecialMechanic {
  id                         String                       @id @default(uuid()) @db.Uuid
  name                       String?                      @db.VarChar(255)
  effectSpecialMechanicCombo EffectSpecialMechanicCombo[]
}

model EffectSpecialMechanicCombo {
  id                      String                @id @default(uuid()) @db.Uuid
  effectId                String                @db.Uuid
  effectSpecialMechanicId String                @db.Uuid
  effect                  Effect                @relation(fields: [effectId], references: [id])
  effectSpecialMechanic   EffectSpecialMechanic @relation(fields: [effectSpecialMechanicId], references: [id])
}

model FeatCastMode {
  id   String  @id @default(uuid()) @db.Uuid
  name String? @db.VarChar(255)
  feat Feat[]
}

model FeatReactiveEventInitiator {
  id   String  @id @default(uuid()) @db.Uuid
  name String? @db.VarChar(255)
  feat Feat[]
}

model FeatSpecialMechanic {
  id   String  @id @default(uuid()) @db.Uuid
  name String? @db.VarChar(255)
  feat Feat[]
}

model FeatTargetType {
  id     String  @id @default(uuid()) @db.Uuid
  name   String? @db.VarChar(255)
  feats1 Feat[]  @relation("feat_feattargettypeidtarget1Tofeattargettype")
  feats2 Feat[]  @relation("feat_feattargettypeidtarget2Tofeattargettype")
}

model FightTargetType {
  id        String      @id @default(uuid()) @db.Uuid
  name      String      @db.VarChar(50)
  adventure Adventure[]
}

model Image {
  id              String        @id @default(uuid()) @db.Uuid
  imageCategoryId String        @db.Uuid
  filename        String        @db.VarChar(50)
  isDeleted       Boolean
  raceId          String?       @db.Uuid
  careerId        String?       @db.Uuid
  genderId        String?       @db.Uuid
  gender          Int?
  career          Career?       @relation(fields: [careerId], references: [id])
  genderEntity    Gender?       @relation(fields: [genderId], references: [id])
  imageCategory   ImageCategory @relation(fields: [imageCategoryId], references: [id])
  race            Race?         @relation(fields: [raceId], references: [id])
  activities      Activity[]
  adventure       Adventure[]
  characters      Character[]
  item            Item[]
}

model ImageCategory {
  id        String  @id @default(uuid()) @db.Uuid
  name      String  @db.VarChar(50)
  isDeleted Boolean
  image     Image[]
}

model ItemEquippableInSlot {
  id         String   @id @default(uuid()) @db.Uuid
  itemId     String   @db.Uuid
  itemSlotId String   @db.Uuid
  item       Item     @relation(fields: [itemId], references: [id])
  itemSlot   ItemSlot @relation(fields: [itemSlotId], references: [id])
}

model ItemSkillBonus {
  id      String @id @default(uuid()) @db.Uuid
  itemId  String @db.Uuid
  skillId String @db.Uuid
  bonus   Int
  item    Item   @relation(fields: [itemId], references: [id])
  skill   Skill  @relation(fields: [skillId], references: [id])
}

model Phrase {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @db.VarChar(50)
  isDeleted           Boolean
  phraseVariation     PhraseVariation[]
  phraseVariationTerm PhraseVariationTerm[]
}

model PhraseVariation {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String                @db.VarChar(50)
  phraseId            String                @db.Uuid
  phrase              Phrase                @relation(fields: [phraseId], references: [id])
  phraseVariationTerm PhraseVariationTerm[]
}

model PhraseVariationTerm {
  id                String           @id @default(uuid()) @db.Uuid
  name              String           @db.VarChar(100)
  phraseVariationId String?          @db.Uuid
  phraseId          String           @db.Uuid
  phrase            Phrase           @relation(fields: [phraseId], references: [id])
  phraseVariation   PhraseVariation? @relation(fields: [phraseVariationId], references: [id])
}

model RaceAdventure {
  id          String    @id @default(uuid()) @db.Uuid
  raceId      String    @db.Uuid
  adventureId String    @db.Uuid
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  race        Race      @relation(fields: [raceId], references: [id])
}
